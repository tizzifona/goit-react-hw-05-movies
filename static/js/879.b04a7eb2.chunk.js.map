{"version":3,"file":"static/js/879.b04a7eb2.chunk.js","mappings":"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","sources":["components/API/API.js","webpack://goit-react-hw-05-movies/./src/components/Movies/Movies.module.css?9f30","components/Movies/Movies.jsx"],"sourcesContent":["const API_KEY = '4f3b16f8367209c446bd09682fa8b6ff';\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching trending movies:', error);\n    return [];\n  }\n};\n\nexport const searchMoviesByKeyword = async (keyword) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/search/movie?api_key=${API_KEY}&query=${keyword}`);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    return [];\n  }\n};\n\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    return null;\n  }\n};\n\nexport const getMovieCredits = async (movieId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n    const data = await response.json();\n    return data.cast;\n  } catch (error) {\n    console.error('Error fetching movie credits:', error);\n    return [];\n  }\n};\n\nexport const getMovieReviews = async (movieId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching movie reviews:', error);\n    return [];\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesContainer\":\"Movies_moviesContainer__D1+tn\",\"moviesTitle\":\"Movies_moviesTitle__DtwfS\",\"moviesInput\":\"Movies_moviesInput__6dswK\",\"searchForm\":\"Movies_searchForm__S-9T7\",\"searchBtn\":\"Movies_searchBtn__pm9qY\",\"pulse\":\"Movies_pulse__AUHpn\",\"buttonClick\":\"Movies_buttonClick__CbYFt\",\"searchImg\":\"Movies_searchImg__fGKAE\",\"moviesList\":\"Movies_moviesList__Un-WS\",\"moviesItem\":\"Movies_moviesItem__BPaMl\",\"moviesImg\":\"Movies_moviesImg__oCXNc\",\"moviesLink\":\"Movies_moviesLink__rgFnl\"};","import React, { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams, Link } from 'react-router-dom';\nimport { searchMoviesByKeyword } from '../API/API';\nimport Notiflix from 'notiflix';\nimport css from './Movies.module.css';\nimport searchButton from '../images/icon-search.png';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchKeyword = searchParams.get('query') ?? '';\n\n  const handleSearch = event => {\n    setSearchQuery(event.target.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (searchQuery.trim() === '') {\n      Notiflix.Notify.warning('Please, enter something');\n    } else {\n      fetchMovies();\n    }\n  };\n\n  const fetchMovies = async () => {\n    const searchResults = await searchMoviesByKeyword(searchQuery);\n    if (searchResults.length === 0) {\n      Notiflix.Notify.failure('Oooops, nothing was found');\n    } else {\n      setMovies(searchResults);\n      setSearchParams({ query: searchQuery });\n      setSearchQuery('');\n    }\n  };\n\n  const truncateTitle = title => {\n    if (title.length > 25) {\n      return title.slice(0, 25) + '...';\n    }\n    return title;\n  };\n\n  useEffect(() => {\n    const fetchPreviousMovies = async () => {\n      if (searchKeyword) {\n        const searchResults = await searchMoviesByKeyword(searchKeyword);\n        setMovies(searchResults);\n      }\n    };\n\n    fetchPreviousMovies();\n  }, [searchKeyword]);\n\n  return (\n    <div className={css.moviesContainer}>\n      <h1 className={css.moviesTitle}>Search Movies</h1>\n      <form className={css.searchForm} onSubmit={handleSubmit}>\n        <input\n          className={css.moviesInput}\n          type=\"text\"\n          value={searchQuery}\n          onChange={handleSearch}\n          placeholder=\"Search movies\"\n        />\n        <button className={css.searchBtn} type=\"submit\"> <img src={searchButton} alt=\"Search Button\" className={css.searchImg} />\n        </button>\n      </form>\n\n      <ul className={css.moviesList}>\n        {movies &&\n          movies.map(({ id, title, poster_path }) => (\n            <li className={css.moviesItem} key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }} className={css.moviesLink} >\n                {truncateTitle(title)}\n                {poster_path && (\n                  <img\n                    className={css.moviesImg}\n                    src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                    alt={title}\n                    width=\"200\"\n                    height=\"auto\"\n                  />\n                )}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","API_BASE_URL","getTrendingMovies","fetch","response","json","data","results","console","error","searchMoviesByKeyword","keyword","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","useState","searchQuery","setSearchQuery","movies","setMovies","location","useLocation","useSearchParams","searchParams","setSearchParams","searchKeyword","get","fetchMovies","searchResults","length","Notiflix","query","truncateTitle","title","slice","useEffect","fetchPreviousMovies","className","css","onSubmit","event","preventDefault","trim","type","value","onChange","target","toLowerCase","placeholder","src","alt","map","id","poster_path","to","state","from","width","height"],"sourceRoot":""}